'use client'

import { useCallback, useEffect, useRef } from 'react'
import { createPortal } from 'react-dom'

const isHTMLElement = (element: any): element is HTMLElement => {
  return element instanceof HTMLElement
}

export const SignUnModal: React.FC<{ isOpen: boolean, onClose: () => void }> = ({ isOpen, onClose }) => {
  const modalRef = useRef<HTMLDivElement>(null)
  const modalId = useRef<string>('modal' + Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15))

  const closeModalOnOverlayClick = useCallback((e: MouseEvent) => {
    if (e.target instanceof HTMLElement) {
      if (e.target.closest('#' + modalId.current)) {
        return
      }
    }

    onClose()
  }, [])
  
  useEffect(() => {
    if (modalRef.current) {
      const possibleFocusableElements = Array.from(modalRef.current.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'))
      const firstFocusableElement = possibleFocusableElements[0]
      const lastFocusableElement = possibleFocusableElements[possibleFocusableElements.length - 1]
      modalRef.current.addEventListener('keydown', (e) => {
        if (e.key === 'Tab') {
          if (isHTMLElement(lastFocusableElement) && isHTMLElement(e.target) && isHTMLElement(firstFocusableElement)) {
            if (e.shiftKey && e.target.isSameNode(firstFocusableElement)) {
              e.preventDefault()
              lastFocusableElement.focus()
            } else if (e.target.isSameNode(lastFocusableElement)) {
              e.preventDefault()
              firstFocusableElement.focus()
            }
          }
        }
      })

      modalRef.current.focus()

      if (typeof document !== 'undefined') {
        document.addEventListener('click', closeModalOnOverlayClick)
      }
    }

    return () => {
      if (typeof document !== 'undefined') {
        document.removeEventListener('click', closeModalOnOverlayClick)
      }
    }
  }, [isOpen])

  return <>
    {
      isOpen ? createPortal(<div className="absolute left-0 z-50 items-center justify-center flex top-0 h-full w-full bg-black/50">
      <div id={modalId.current} tabIndex={-1} role="dialog" aria-label="Modal Title oh no" aria-labelledby="modalTitle" aria-modal="true" ref={modalRef} className="modal bg-white">
        <div>
          <div id="modalTitle">Modal Title oh no</div>
          <button type="button" aria-label="Close" onClick={onClose}>
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div>
          <p id="modalDescription">Some content for the modal.</p>
        </div>
        <div>
          <button type="button" onClick={onClose}>Close</button>
        </div>
        </div>
    </div>, document.body) : null
    }
  </>
}